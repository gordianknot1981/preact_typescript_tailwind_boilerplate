import { resolve }      from "path";
import asyncPlugin      from "preact-cli-plugin-async/async-plugin"
import preactCliLodash  from "preact-cli-lodash"
import preactCliPostCSS from "preact-cli-postcss"
import PurgeCssPlugin from "purgecss-webpack-plugin"
import glob from 'glob'

const PATHS = {
    src: path.join(__dirname, 'src')
}

export default {
    /**
     * Function that mutates the original webpack config.
     * Supports asynchronous changes when a promise is returned (or it's an async function).
     *A
     * @param {object} config - original webpack config.
     * @param {object} env - options passed to the CLI.
     * @param {WebpackConfigHelpers} helpers - object with useful helpers for working with the webpack config.
     * @param {object} options - this is mainly relevant for plugins (will always be empty in the config), default to an empty object
     **/
    webpack(config, env, helpers, options) {
        config.module.rules[4].use.splice(1, 0, {
            loader: "@teamsupercell/typings-for-css-modules-loader",
            options: {
                banner:
                    "// This file is automatically generated from your CSS. Any edits will be overwritten.",
                disableLocalsExport: true
            }
        });

        // Use any `index` file, not just index.js
        config.resolve.alias["preact-cli-entrypoint"] = resolve(
            process.cwd(),
            "src",
            "index"
        );
    
        
        asyncPlugin(config);
        preactCliPluginAsync(config);
        preactCliLodash(config, {
            'collections': true,
            'paths': true
        });
        preactCliPostCSS(config, helpers);
        /// see: https://blog.agney.dev/preact-cli-with-typescript/
        
        const purgecss = new PurgeCssPlugin({
            paths: glob.sync(`${PATHS.src}/**/*`, { nodir: true }),
            // Include any special characters you're using in this regular expression
            defaultExtractor: content => content.match(params.regex) || [],
        });
    
        const postCssLoaders = helpers.getLoadersByName(config, 'postcss-loader');
        postCssLoaders.forEach(({ loader }) => {
            const plugins = loader.options.plugins;
            // Add tailwind css at the top.
            plugins.unshift(require('tailwindcss'));
            // Add PurgeCSS only in production.
            if (env.production) {
                plugins.push(purgecss);
            }
        });
        return config;
        
    
        //const stylusRule = config.module.rules.find(
        //   rule => String(rule.test) === String(/\.styl$/),
        //);
        //
        //stylusRule.use[0].options.options.paths =
        //   stylusRule.use[0].options.options.paths[0];
        
    
    }
};
